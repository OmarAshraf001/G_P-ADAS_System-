#include <WiFi.h>
#include <esp_now.h>
#include <SPI.h>

  #define HSPI_MISO   26
  #define HSPI_MOSI   27
  #define HSPI_SCLK   25
  #define HSPI_SS     32

  #define my_data_length 10
  static const int spiClk = 1000000;
  char find_dev=0;
  char data_received=0;
  char trigger_MCU_to_send=0b10101010;
  char trigger_MCU_to_rece=0b01010101;
  char dummy=0x00;

  char my_data[my_data_length];

  //uninitalised pointers to SPI objects
         
             SPIClass * hspi = NULL;
/*****************************************************************************/

void formatMacAddress(const uint8_t *macAddr, char *buffer, int maxLength)
{
  snprintf(buffer, maxLength, "%02x:%02x:%02x:%02x:%02x:%02x", macAddr[0], macAddr[1], macAddr[2], macAddr[3], macAddr[4], macAddr[5]);
}

void receiveCallback(const uint8_t *macAddr, const uint8_t *data, int dataLen)
{
  // only allow a maximum of 250 characters in the message + a null terminating byte
  char buffer[ESP_NOW_MAX_DATA_LEN + 1];
  int msgLen = min(ESP_NOW_MAX_DATA_LEN, dataLen);
  strncpy(buffer, (const char *)data, msgLen);
  // make sure we are null terminated
  buffer[msgLen] = 0;
  
  // what are our instructions
  if(strcmp("test", buffer)!=0)
  {
      hspi->transfer(trigger_MCU_to_rece);
   delay(100);

        for(char i=0;i<msgLen;i++)
        {
          hspi->transfer(buffer[i]);
        }
  }
  
  
}

void sentCallback(const uint8_t *macAddr, esp_now_send_status_t status)
{
  char macStr[18];
  formatMacAddress(macAddr, macStr, 18);
  Serial.print("Last Packet Sent to: ");
  Serial.println(macStr);
  Serial.print("Last Packet Send Status: ");
  if(status==ESP_NOW_SEND_SUCCESS)
  {
         if(find_dev)
                      {
                        data_received=1;
                      }
                      else
                      {
                        data_received=0;
                      }
    
  }
  else
  {

    data_received=0;
    find_dev=0;
  }
  
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");

}

void broadcast(char * message,int length)
{
  // this will broadcast a message to everyone in range
  uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  esp_now_peer_info_t peerInfo = {};
  memcpy(&peerInfo.peer_addr, broadcastAddress, 6);
  if (!esp_now_is_peer_exist(broadcastAddress))
  {
    esp_now_add_peer(&peerInfo);
  }
  esp_err_t result = esp_now_send(broadcastAddress,(const uint8_t*) message, length);
  // and this will send a message to a specific device
  /*uint8_t peerAddress[] = {0x3C, 0x71, 0xBF, 0x47, 0xA5, 0xC0};
  esp_now_peer_info_t peerInfo = {};
  memcpy(&peerInfo.peer_addr, peerAddress, 6);
  if (!esp_now_is_peer_exist(peerAddress))
  {
    esp_now_add_peer(&peerInfo);
  }
  esp_err_t result = esp_now_send(peerAddress, (const uint8_t *)message.c_str(), message.length());*/
  if (result == ESP_OK)
  {
    Serial.println("Broadcast message success");
  }
  else if (result == ESP_ERR_ESPNOW_NOT_INIT)
  {
    Serial.println("ESPNOW not Init.");
  }
  else if (result == ESP_ERR_ESPNOW_ARG)
  {
    Serial.println("Invalid Argument");
  }
  else if (result == ESP_ERR_ESPNOW_INTERNAL)
  {
    Serial.println("Internal Error");
  }
  else if (result == ESP_ERR_ESPNOW_NO_MEM)
  {
    Serial.println("ESP_ERR_ESPNOW_NO_MEM");
  }
  else if (result == ESP_ERR_ESPNOW_NOT_FOUND)

  {
    Serial.println("Peer not found.");
  }
  else
  {
    Serial.println("Unknown error");
  }
}

   

void setup() {

 Serial.begin(115200);
  delay(1000);

    WiFi.mode(WIFI_STA);

      WiFi.disconnect();


       if (esp_now_init() == ESP_OK)
  {
    Serial.println("ESPNow Init Success");
    esp_now_register_recv_cb(receiveCallback);
    esp_now_register_send_cb(sentCallback);
  }
  else
  {
    Serial.println("ESPNow Init Failed");
    delay(3000);
    ESP.restart();
  }

  //initialise  HSPI

  hspi = new SPIClass(HSPI);

   hspi->begin(HSPI_SCLK, HSPI_MISO, HSPI_MOSI, HSPI_SS); //SCLK, MISO, MOSI, SS

   hspi->beginTransaction(SPISettings(spiClk, MSBFIRST, SPI_MODE0));

   pinMode(HSPI_SS, OUTPUT); //HSPI SS

   digitalWrite(HSPI_SS, LOW);

}

void loop() {
   
   if(find_dev==0 && data_received==0  )

   {
         find_dev=1;
         broadcast("test",4);
   }
   else if(find_dev==1 && data_received==1)
   {

          find_dev=0;
         
         hspi->transfer(trigger_MCU_to_send);

        delay(100);

        for(char i=0;i<my_data_length;i++)
        {
          my_data[i]=hspi->transfer(dummy);
        }
         
        broadcast(my_data,my_data_length);

   }
 
 delay(100);
 
}
